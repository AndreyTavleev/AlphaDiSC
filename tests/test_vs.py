import os

import pytest
import numpy as np
from astropy import constants
from alpha_disc import vs, profiles

test_cases = {
    (1, 0.01, 1e+16, 50): [0.0431864, 6.62019, 0.0125417, 9.78567e+06, 1.70071e+13, 9241.62],
    (1, 0.01, 1e+16, 100): [0.0431282, 9.10762, 0.00533554, 6.08352e+06, 4.49797e+12, 7548.46],
    (1, 0.01, 1e+16, 500): [0.0455965, 17.5363, 0.000506623, 1.81191e+06, 1.27205e+11, 3597.09],
    (1, 0.01, 1e+16, 1000): [0.0475044, 22.6025, 0.000165481, 1.0445e+06, 2.39518e+10, 2425.95],
    (1, 0.01, 1e+18, 1000): [0.129534, 3.47295, 0.000631092, 3.90924e+06, 3.41875e+11, 28320.5],
    (1, 0.05, 1e+16, 50): [0.0355472, 5.56031, 0.00426609, 6.84494e+06, 4.04653e+12, 2633.78],
    (1, 0.05, 1e+16, 100): [0.0354435, 7.64252, 0.00181903, 4.25582e+06, 1.07276e+12, 2154.29],
    (1, 0.05, 1e+16, 500): [0.037344, 14.6942, 0.000173092, 1.26752e+06, 3.04029e+10, 1027.96],
    (1, 0.05, 1e+16, 1000): [0.0388486, 18.9315, 5.65569e-05, 730642, 5.72628e+09, 693.409],
    (1, 0.05, 1e+18, 500): [0.114924, 1.97033, 0.000415167, 4.29354e+06, 2.47014e+11, 8923.69],
    (1, 0.05, 1e+18, 1000): [0.107093, 2.92818, 0.000213357, 2.73453e+06, 8.08486e+10, 8040.81],
    (1, 0.1, 1e+16, 50): [0.0326059, 5.15912, 0.00268036, 5.86849e+06, 2.17973e+12, 1533.44],
    (1, 0.1, 1e+16, 100): [0.032485, 7.08791, 0.00114416, 3.64891e+06, 5.7854e+11, 1255.15],
    (1, 0.1, 1e+16, 500): [0.0341639, 13.6183, 0.000108989, 1.08676e+06, 1.64134e+10, 599.302],
    (1, 0.1, 1e+16, 1000): [0.0355104, 17.5418, 3.56174e-05, 626429, 3.09184e+09, 404.294],
    (1, 0.1, 1e+18, 500): [0.105832, 1.8343, 0.000258765, 3.6798e+06, 1.31951e+11, 5170.27],
    (1, 0.1, 1e+18, 1000): [0.0984742, 2.72202, 0.000133647, 2.34446e+06, 4.34196e+10, 4672.99],
    (5, 0.01, 1e+16, 50): [0.0246898, 11.3214, 0.00307847, 4.46177e+06, 1.90338e+12, 6106.48],
    (5, 0.01, 1e+16, 100): [0.0255445, 14.7357, 0.00112864, 2.68019e+06, 4.19184e+11, 4535.89],
    (5, 0.01, 1e+16, 500): [0.028305, 26.1743, 8.68797e-05, 760545, 9.15644e+09, 1891.62],
    (5, 0.01, 1e+16, 1000): [0.0297688, 33.1658, 2.71539e-05, 433994, 1.63305e+09, 1240.54],
    (5, 0.01, 1e+18, 500): [0.0735202, 4.32328, 0.000408032, 2.98276e+06, 1.68653e+11, 25216.5],
    (5, 0.01, 1e+18, 1000): [0.0727376, 6.03609, 0.000167182, 1.80918e+06, 4.19135e+10, 19644.1],
    (5, 0.05, 1e+16, 50): [0.020268, 9.49501, 0.00105056, 3.12134e+06, 4.54407e+11, 1743.82],
    (5, 0.05, 1e+16, 100): [0.020941, 12.3516, 0.000385473, 1.87497e+06, 1.00155e+11, 1295.96],
    (5, 0.05, 1e+16, 500): [0.0231262, 21.9188, 2.96969e-05, 531999, 2.1893e+09, 540.716],
    (5, 0.05, 1e+16, 1000): [0.0242836, 27.7656, 9.28305e-06, 303564, 3.90503e+08, 354.629],
    (5, 0.05, 1e+18, 500): [0.0606981, 3.64056, 0.000138432, 2.08687e+06, 4.00329e+10, 7175.06],
    (5, 0.05, 1e+18, 1000): [0.0599377, 5.07491, 5.69214e-05, 1.26597e+06, 9.98574e+09, 5601.83],
    (5, 0.1, 1e+16, 50): [0.0185654, 8.80362, 0.000661117, 2.67624e+06, 2.45181e+11, 1016.3],
    (5, 0.1, 1e+16, 100): [0.0191678, 11.4491, 0.000242675, 1.60759e+06, 5.40608e+10, 755.473],
    (5, 0.1, 1e+16, 500): [0.0211278, 20.3077, 1.87033e-05, 456113, 1.18215e+09, 315.274],
    (5, 0.1, 1e+16, 1000): [0.0221647, 25.7212, 5.84696e-06, 260258, 2.10871e+08, 206.776],
    (5, 0.1, 1e+18, 500): [0.0557741, 3.38217, 8.68649e-05, 1.78937e+06, 2.15391e+10, 4174.33],
    (5, 0.1, 1e+18, 1000): [0.0550219, 4.7111, 3.57801e-05, 1.08557e+06, 5.38247e+09, 3262.59],
    (10, 0.01, 1e+16, 50): [0.0197646, 13.8598, 0.0015562, 3.12518e+06, 6.73941e+11, 4862.71],
    (10, 0.01, 1e+16, 100): [0.0206502, 17.7396, 0.000546212, 1.85851e+06, 1.40672e+11, 3513.36],
    (10, 0.01, 1e+16, 500): [0.0231568, 30.8447, 3.97916e-05, 520722, 2.87131e+09, 1414.82],
    (10, 0.01, 1e+16, 1000): [0.024409, 38.9212, 1.23024e-05, 296403, 5.05307e+08, 921.481],
    (10, 0.01, 1e+18, 500): [0.0575355, 5.4631, 0.000227276, 2.13425e+06, 6.72175e+10, 21360.6],
    (10, 0.01, 1e+18, 1000): [0.057943, 7.43116, 8.64224e-05, 1.27292e+06, 1.52444e+10, 15866.7],
    (10, 0.05, 1e+16, 50): [0.0162079, 11.6187, 0.000531412, 2.18627e+06, 1.60997e+11, 1389.2],
    (10, 0.05, 1e+16, 100): [0.0169114, 14.8643, 0.00018662, 1.30011e+06, 3.36219e+10, 1004.03],
    (10, 0.05, 1e+16, 500): [0.0188993, 25.8246, 1.36029e-05, 364232, 6.86583e+08, 404.445],
    (10, 0.05, 1e+16, 1000): [0.0198886, 32.5786, 4.20611e-06, 207318, 1.20837e+08, 263.426],
    (10, 0.05, 1e+18, 100): [0.0520432, 1.99119, 0.000447853, 4.40324e+06, 2.73269e+11, 8718.67],
    (10, 0.05, 1e+18, 500): [0.0474367, 4.59515, 7.73144e-05, 1.49339e+06, 1.59999e+10, 6088],
    (10, 0.05, 1e+18, 1000): [0.0476933, 6.24264, 2.94655e-05, 890724, 3.63697e+09, 4528.55],
    (10, 0.1, 1e+16, 50): [0.014838, 10.7704, 0.000334523, 1.87451e+06, 8.68953e+10, 809.785],
    (10, 0.1, 1e+16, 100): [0.0154706, 13.7758, 0.000117507, 1.1147e+06, 1.81512e+10, 585.357],
    (10, 0.1, 1e+16, 500): [0.0172553, 23.924, 8.56766e-06, 312273, 3.70748e+08, 235.822],
    (10, 0.1, 1e+16, 1000): [0.018141, 30.1774, 2.64933e-06, 177741, 6.52537e+07, 153.597],
    (10, 0.1, 1e+18, 100): [0.0479233, 1.8536, 0.000279173, 3.77382e+06, 1.45995e+11, 5051.87],
    (10, 0.1, 1e+18, 500): [0.0435585, 4.26663, 4.8578e-05, 1.28057e+06, 8.6204e+09, 3544.79],
    (10, 0.1, 1e+18, 1000): [0.0437561, 5.79276, 1.85343e-05, 763801, 1.96173e+09, 2638.61],
    (100, 0.01, 1e+16, 50): [0.00986417, 25.1484, 0.000132417, 914901, 1.67881e+10, 2012.35],
    (100, 0.01, 1e+16, 100): [0.010487, 31.2056, 4.29052e-05, 534134, 3.17573e+09, 1381.98],
    (100, 0.01, 1e+16, 500): [0.011998, 52.2946, 2.84027e-06, 146396, 5.762e+07, 523.705],
    (100, 0.01, 1e+16, 1000): [0.0122575, 65.5333, 8.62262e-07, 82987.2, 9.91593e+06, 337.05],
    (100, 0.01, 1e+18, 50): [0.0261306, 4.02823, 0.000571448, 3.51966e+06, 2.78715e+11, 25418.5],
    (100, 0.01, 1e+18, 100): [0.0260586, 5.52446, 0.000245013, 2.18893e+06, 7.43197e+10, 20862.1],
    (100, 0.01, 1e+18, 500): [0.0275234, 10.5853, 2.34358e-05, 651898, 2.11711e+09, 9987.37],
    (100, 0.01, 1e+18, 1000): [0.0286768, 13.6241, 7.66367e-06, 375732, 3.99022e+08, 6740.59],
    (100, 0.01, 1e+20, 500): [0.0847907, 1.45134, 5.34255e-05, 2.20392e+06, 1.63165e+10, 84032.2],
    (100, 0.01, 1e+20, 1000): [0.0787052, 2.14116, 2.81533e-05, 1.40614e+06, 5.48579e+09, 76877.1],
    (100, 0.05, 1e+16, 50): [0.00806133, 21.0608, 4.52606e-05, 639974, 4.01389e+09, 575.216],
    (100, 0.05, 1e+16, 100): [0.00855824, 26.1264, 1.46674e-05, 373613, 7.59378e+08, 395.056],
    (100, 0.05, 1e+16, 500): [0.00975377, 43.7621, 9.71165e-07, 102393, 1.37799e+07, 149.713],
    (100, 0.05, 1e+16, 1000): [0.00978982, 54.8264, 2.94901e-07, 58048.6, 2.37219e+06, 96.2827],
    (100, 0.05, 1e+18, 50): [0.0215823, 3.39323, 0.000193654, 2.46231e+06, 6.60773e+10, 7227.46],
    (100, 0.05, 1e+18, 100): [0.0214832, 4.64645, 8.33532e-05, 1.53164e+06, 1.76914e+10, 5946.15],
    (100, 0.05, 1e+18, 500): [0.0226123, 8.8817, 8.00169e-06, 456133, 5.05774e+08, 2853.04],
    (100, 0.05, 1e+18, 1000): [0.0235274, 11.4236, 2.61806e-06, 262879, 9.53715e+07, 1926.21],
    (100, 0.05, 1e+20, 500): [0.0707098, 1.23688, 1.75939e-05, 1.53989e+06, 3.75434e+09, 23480.6],
    (100, 0.05, 1e+20, 1000): [0.0653357, 1.81532, 9.4399e-06, 983715, 1.28683e+09, 21716.4],
    (100, 0.1, 1e+16, 50): [0.00736574, 19.5133, 2.85048e-05, 548688, 2.16734e+09, 335.387],
    (100, 0.1, 1e+16, 100): [0.00781338, 24.2034, 9.23814e-06, 320315, 4.10057e+08, 230.348],
    (100, 0.1, 1e+16, 500): [0.00888467, 40.5315, 6.11746e-07, 87783.2, 7.44159e+06, 87.2908],
    (100, 0.1, 1e+16, 1000): [0.00882518, 50.7685, 1.8581e-07, 49773, 1.28158e+06, 56.0988],
    (100, 0.1, 1e+18, 50): [0.0198355, 3.15292, 0.000121448, 2.1112e+06, 3.55306e+10, 4203.35],
    (100, 0.1, 1e+18, 100): [0.019726, 4.31412, 5.23738e-05, 1.31337e+06, 9.53198e+09, 3462.26],
    (100, 0.1, 1e+18, 500): [0.0207244, 8.23682, 5.03668e-06, 391123, 2.72986e+08, 1663.07],
    (100, 0.1, 1e+18, 1000): [0.0215465, 10.5906, 1.6484e-06, 225404, 5.14879e+07, 1122.99],
    (100, 0.1, 1e+20, 500): [0.065313, 1.15589, 1.08775e-05, 1.31946e+06, 1.98887e+09, 13538.1],
    (100, 0.1, 1e+20, 1000): [0.0602125, 1.69209, 5.88907e-06, 843437, 6.88307e+08, 12589.2],
    (1e+06, 0.01, 1e+16, 50): [9.6072e-08, 1.42483e-08, 6.89734e-05, 899.677, 8.59907e+06, 195.694],
    (1e+06, 0.01, 1e+16, 100): [8.68124e-09, 1.5026e-10, 0.000242908, 547.23, 1.84202e+07, 124.553],
    (1e+06, 0.01, 1e+18, 50): [0.000144213, 0.00189875, 1.32691e-06, 3340.04, 614152, 5618.32],
    (1e+06, 0.01, 1e+18, 100): [1.4209e-05, 4.06203e-06, 4.69274e-06, 1731.78, 1.12617e+06, 3936.91],
    (1e+06, 0.01, 1e+18, 500): [4.55141e-08, 8.27661e-11, 9.51453e-05, 531.911, 7.01309e+06, 1278.89],
    (1e+06, 0.01, 1e+20, 50): [0.00352808, 9.15774, 2.8381e-07, 118442, 4.65816e+06, 15528],
    (1e+06, 0.01, 1e+20, 100): [0.0031969, 11.3261, 9.22149e-08, 69186.2, 884104, 10636.7],
    (1e+06, 0.01, 1e+20, 500): [7.42464e-05, 2.31942e-06, 1.84307e-06, 1689.22, 431432, 40327.9],
    (1e+06, 0.01, 1e+20, 1000): [6.05367e-06, 2.02155e-08, 6.84895e-06, 1006.27, 955040, 24488.8],
    (1e+06, 0.05, 1e+16, 50): [3.82987e-08, 1.13216e-08, 3.46037e-05, 899.677, 4.31412e+06, 39.1388],
    (1e+06, 0.05, 1e+16, 100): [3.46078e-09, 1.19396e-10, 0.000121867, 547.23, 9.2414e+06, 24.9109],
    (1e+06, 0.05, 1e+18, 50): [6.1705e-05, 0.000366747, 6.76304e-07, 2898, 271596, 1222.72],
    (1e+06, 0.05, 1e+18, 100): [5.66782e-06, 3.20695e-06, 2.35313e-06, 1730.7, 564353, 787.71],
    (1e+06, 0.05, 1e+18, 500): [1.81437e-08, 6.57654e-11, 4.77333e-05, 531.911, 3.51839e+06, 255.769],
    (1e+06, 0.05, 1e+20, 50): [0.00287868, 7.68892, 9.69094e-08, 82888.4, 1.11312e+06, 4435.54],
    (1e+06, 0.05, 1e+20, 100): [0.00237822, 9.47937, 3.16906e-08, 48578.3, 213332, 3021.93],
    (1e+06, 0.05, 1e+20, 500): [2.96988e-05, 1.77648e-06, 9.22103e-07, 1683.18, 215076, 8084.81],
    (1e+06, 0.05, 1e+20, 1000): [2.41332e-06, 1.606e-08, 3.43604e-06, 1006.25, 479123, 4897.83],
    (1e+06, 0.1, 1e+16, 50): [2.57735e-08, 1.02543e-08, 2.57107e-05, 899.677, 3.20541e+06, 19.5698],
    (1e+06, 0.1, 1e+16, 100): [2.32897e-09, 1.08141e-10, 9.05478e-05, 547.23, 6.86642e+06, 12.4558],
    (1e+06, 0.1, 1e+18, 50): [4.18938e-05, 0.000299036, 4.99416e-07, 2868.29, 198504, 615.503],
    (1e+06, 0.1, 1e+18, 100): [3.8144e-06, 2.90268e-06, 1.74828e-06, 1730.58, 419263, 393.872],
    (1e+06, 0.1, 1e+18, 500): [1.22101e-08, 5.95656e-11, 3.54663e-05, 531.911, 2.6142e+06, 127.889],
    (1e+06, 0.1, 1e+20, 50): [0.00262819, 7.13286, 6.10031e-08, 71081.5, 600885, 2585.32],
    (1e+06, 0.1, 1e+20, 100): [0.00204791, 8.77586, 2.01081e-08, 41815.1, 116517, 1755.49],
    (1e+06, 0.1, 1e+20, 500): [1.99929e-05, 1.60295e-06, 6.84917e-07, 1682.56, 159695, 4043.4],
    (1e+06, 0.1, 1e+20, 1000): [1.62405e-06, 1.45456e-08, 2.55297e-06, 1006.25, 355986, 2448.92],
    (1e+08, 0.01, 1e+20, 50): [6.91411e-07, 7.38035e-09, 9.58386e-06, 899.683, 1.19485e+06, 19569.3],
    (1e+08, 0.01, 1e+20, 100): [6.24791e-08, 7.78272e-11, 3.37525e-05, 547.23, 2.55952e+06, 12455.8],
    (1e+08, 0.05, 1e+20, 50): [2.7563e-07, 5.86406e-09, 4.80817e-06, 899.678, 599446, 3913.87],
    (1e+08, 0.1, 1e+20, 50): [1.85486e-07, 5.31119e-09, 3.57246e-06, 899.678, 445386, 1956.94],
}

def get_reference_path(filename):
    current_dir = os.path.dirname(__file__)  # path to current file
    data_dir = os.path.join(current_dir, "test_data")
    return os.path.join(data_dir, filename)


@pytest.mark.parametrize('test_case, test_values', test_cases.items())
def test_vs(test_case, test_values):
    M, alpha, Mdot, r = test_case
    rg = 2 * M * constants.GM_sun.cgs.value / constants.c.cgs.value ** 2
    r *= rg
    h = np.sqrt(M * constants.GM_sun.cgs.value * r)
    r_in = 3 * rg
    F = Mdot * h * (1 - np.sqrt(r_in / r))
    structure = vs.IdealBellLin1994VerticalStructure(M * constants.M_sun.cgs.value, alpha, r, F)

    z0r, _ = structure.fit()
    z0r_test = test_values[0]
    assert np.isclose(z0r, z0r_test)

    varkappa_C, rho_C, T_C, P_C, Sigma0 = structure.parameters_C()
    assert np.allclose([varkappa_C, rho_C, T_C, P_C, Sigma0], test_values[1:])


def test_vertical_profile(tmp_path):
    M = 5 * constants.M_sun.cgs.value
    alpha = 0.1
    r = 1e10
    Teff = 1e4
    profiles.Vertical_Profile(M, alpha, r, Teff, input='Teff', structure='BellLin', mu=0.62,
                              n=100, add_Pi_values=True, path_dots=tmp_path / 'test_vertical_profile.dat')
    resulting_file = np.loadtxt(tmp_path / 'test_vertical_profile.dat')
    reference_file = np.loadtxt(get_reference_path('vs.dat'))
    assert np.allclose(reference_file, resulting_file)


def test_S_curve(tmp_path):
    M = 5 * constants.M_sun.cgs.value
    alpha = 0.1
    r = 1e10
    profiles.S_curve(4e3, 1e4, M, alpha, r, input='Teff', structure='BellLin', mu=0.62, n=100, tau_break=True,
                     path_dots=tmp_path / 'test_S_curve.dat', add_Pi_values=True)
    resulting_file = np.loadtxt(tmp_path / 'test_S_curve.dat')
    reference_file = np.loadtxt(get_reference_path('S-curve.dat'))
    assert np.allclose(reference_file, resulting_file)


def test_rsdial_profile(tmp_path):
    M = 5 * constants.M_sun.cgs.value
    alpha = 0.1
    profiles.Radial_Profile(M, alpha, 1e9, 1e12, 1, input='Mdot_Mdot_edd', structure='BellLin', mu=0.62, n=100,
                   tau_break=True, path_dots=tmp_path / 'test_radial_struct.dat', add_Pi_values=True)
    resulting_file = np.loadtxt(tmp_path / 'test_radial_struct.dat')
    reference_file = np.loadtxt(get_reference_path('radial_struct.dat'))
    assert np.allclose(reference_file, resulting_file)
