import os

import pytest
import numpy as np
from astropy import constants
from alpha_disc import profiles

test_cases = {
    (1, 0.01, 1e+16, 50): [0.0278542, 0.466705, 0.0707666, 6.71834e+06, 6.39269e+13, 28188.1],
    (1, 0.01, 1e+16, 100): [0.0305389, 0.734683, 0.0203394, 4.15001e+06, 1.13484e+13, 17867.2],
    (1, 0.01, 1e+16, 500): [0.0386775, 2.08159, 0.0011567, 1.24847e+06, 1.94008e+11, 6132.2],
    (1, 0.01, 1e+16, 1000): [0.0426371, 3.51669, 0.000306066, 768085, 3.15622e+10, 3577.43],
    (1, 0.01, 1e+18, 500): [0.0855969, 0.392124, 0.00924438, 5.33786e+06, 6.63722e+12, 114742],
    (1, 0.01, 1e+18, 1000): [0.0906461, 0.55978, 0.00287919, 3.1877e+06, 1.23438e+12, 75012.5],
    (1, 0.05, 1e+16, 50): [0.0233195, 0.516352, 0.0214683, 4.96494e+06, 1.4333e+13, 7436.41],
    (1, 0.05, 1e+16, 100): [0.0254111, 0.879932, 0.00623635, 3.07758e+06, 2.58064e+12, 4782.39],
    (1, 0.05, 1e+16, 500): [0.032702, 2.09681, 0.000363218, 913380, 4.45621e+10, 1648.73],
    (1, 0.05, 1e+16, 1000): [0.0357692, 4.24831, 9.16537e-05, 579982, 7.13674e+09, 935.973],
    (1, 0.05, 1e+18, 500): [0.0729587, 0.413823, 0.00267876, 3.87579e+06, 1.39655e+12, 29370.4],
    (1, 0.05, 1e+18, 1000): [0.0768799, 0.643754, 0.00087707, 2.32127e+06, 2.73831e+11, 20073.5],
    (1, 0.1, 1e+16, 50): [0.0215044, 0.541171, 0.0128044, 4.35958e+06, 7.50667e+12, 4182.74],
    (1, 0.1, 1e+16, 100): [0.0233838, 0.941835, 0.00379518, 2.68687e+06, 1.37114e+12, 2734.73],
    (1, 0.1, 1e+16, 500): [0.0303461, 2.13194, 0.000217992, 803228, 2.35175e+10, 928.989],
    (1, 0.1, 1e+16, 1000): [0.0330077, 4.72042, 5.43771e-05, 514395, 3.75538e+09, 524.849],
    (1, 0.1, 1e+18, 500): [0.0679098, 0.425984, 0.00155459, 3.3778e+06, 7.06355e+11, 16240.9],
    (1, 0.1, 1e+18, 1000): [0.071557, 0.656168, 0.000535872, 2.0082e+06, 1.44743e+11, 11495.3],
    (5, 0.01, 1e+16, 50): [0.0184458, 1.12988, 0.00952706, 3.07291e+06, 3.93574e+12, 12721.5],
    (5, 0.01, 1e+16, 100): [0.020639, 1.63147, 0.00293125, 1.82002e+06, 7.16991e+11, 8441.42],
    (5, 0.01, 1e+16, 500): [0.0261269, 5.61659, 0.000139858, 596145, 1.11914e+10, 2546.7],
    (5, 0.01, 1e+16, 1000): [0.0284975, 12.9913, 3.58901e-05, 376954, 1.81549e+09, 1472.82],
    (5, 0.01, 1e+18, 50): [0.0485545, 0.342403, 0.0447732, 1.30827e+07, 7.88003e+13, 168846],
    (5, 0.01, 1e+18, 100): [0.0481479, 0.35401, 0.0198103, 7.87346e+06, 2.09812e+13, 141856],
    (5, 0.01, 1e+18, 500): [0.0549934, 0.769831, 0.00149739, 2.36886e+06, 4.77033e+11, 58592],
    (5, 0.01, 1e+18, 1000): [0.0596678, 0.953874, 0.000477688, 1.35832e+06, 8.72318e+10, 38664.6],
    (5, 0.05, 1e+16, 50): [0.0153922, 1.21535, 0.00308682, 2.21415e+06, 9.18859e+11, 3520.58],
    (5, 0.05, 1e+16, 100): [0.0174183, 1.54773, 0.000941346, 1.3152e+06, 1.66376e+11, 2307.97],
    (5, 0.05, 1e+16, 500): [0.0217861, 7.14083, 4.20891e-05, 449615, 2.54026e+09, 670.178],
    (5, 0.05, 1e+16, 1000): [0.0235465, 15.3932, 1.1075e-05, 281301, 4.18088e+08, 395.562],
    (5, 0.05, 1e+18, 50): [0.0425276, 0.341174, 0.0115749, 9.34106e+06, 1.45459e+13, 40793.7],
    (5, 0.05, 1e+18, 100): [0.0414341, 0.360856, 0.00568987, 5.66371e+06, 4.33499e+12, 36181.9],
    (5, 0.05, 1e+18, 500): [0.0469624, 0.733671, 0.000486523, 1.68523e+06, 1.10263e+11, 16172.6],
    (5, 0.05, 1e+18, 1000): [0.0512152, 0.928719, 0.000150309, 981631, 1.98324e+10, 10404.7],
    (5, 0.1, 1e+16, 50): [0.0142072, 1.1692, 0.0019111, 1.91277e+06, 4.91445e+11, 2026.77],
    (5, 0.1, 1e+16, 100): [0.0161634, 1.546, 0.000574261, 1.14599e+06, 8.84321e+10, 1315.5],
    (5, 0.1, 1e+16, 500): [0.0200425, 7.83025, 2.5168e-05, 397041, 1.34141e+09, 377.781],
    (5, 0.1, 1e+16, 1000): [0.0215792, 17.0255, 6.75047e-06, 246689, 2.23479e+08, 226.862],
    (5, 0.1, 1e+18, 50): [0.0401825, 0.33999, 0.00641081, 8.0564e+06, 6.94848e+12, 22020.8],
    (5, 0.1, 1e+18, 100): [0.0387812, 0.365818, 0.00330098, 4.90658e+06, 2.17878e+12, 19972.8],
    (5, 0.1, 1e+18, 500): [0.0439009, 0.70059, 0.00029828, 1.45644e+06, 5.84201e+10, 9245.15],
    (5, 0.1, 1e+18, 1000): [0.047937, 0.920924, 9.02243e-05, 856720, 1.03886e+10, 5856.3],
    (10, 0.01, 1e+16, 50): [0.0156064, 1.55483, 0.00421855, 2.12892e+06, 1.20715e+12, 9322.98],
    (10, 0.01, 1e+16, 100): [0.0174778, 2.07762, 0.0012538, 1.27697e+06, 2.15097e+11, 6012.22],
    (10, 0.01, 1e+16, 500): [0.0219862, 10.1863, 5.55844e-05, 439019, 3.27494e+09, 1740.2],
    (10, 0.01, 1e+16, 1000): [0.0235134, 21.2568, 1.4753e-05, 272896, 5.40154e+08, 1032.38],
    (10, 0.01, 1e+18, 50): [0.0374328, 0.349097, 0.0265592, 9.17574e+06, 3.27824e+13, 149458],
    (10, 0.01, 1e+18, 100): [0.0386389, 0.390676, 0.010067, 5.46138e+06, 7.3951e+12, 112835],
    (10, 0.01, 1e+18, 500): [0.046004, 0.887953, 0.000704525, 1.6199e+06, 1.53453e+11, 44404.1],
    (10, 0.01, 1e+18, 1000): [0.0501529, 1.20828, 0.000206841, 953039, 2.64904e+10, 27677.2],
    (10, 0.01, 1e+20, 1000): [0.137836, 0.355518, 0.000717011, 3.88718e+06, 3.74966e+11, 300756],
    (10, 0.05, 1e+16, 50): [0.0131285, 1.40769, 0.00137189, 1.52617e+06, 2.81405e+11, 2568.34],
    (10, 0.05, 1e+16, 100): [0.0147762, 2.09509, 0.000394458, 933419, 4.94572e+10, 1618.82],
    (10, 0.05, 1e+16, 500): [0.0182303, 12.035, 1.70299e-05, 328008, 7.49696e+08, 463.639],
    (10, 0.05, 1e+16, 1000): [0.0192871, 24.5623, 4.83359e-06, 197035, 1.27767e+08, 289.388],
    (10, 0.05, 1e+18, 50): [0.0323373, 0.350888, 0.00751868, 6.58916e+06, 6.66455e+12, 37871.3],
    (10, 0.05, 1e+18, 100): [0.0329271, 0.41168, 0.00292371, 3.96506e+06, 1.55936e+12, 28919.6],
    (10, 0.05, 1e+18, 500): [0.0395091, 0.837951, 0.00022434, 1.16404e+06, 3.51082e+10, 12060.4],
    (10, 0.05, 1e+18, 1000): [0.0429126, 1.25993, 6.22546e-05, 704361, 5.89128e+09, 7223.42],
    (10, 0.1, 1e+16, 50): [0.0121644, 1.3953, 0.000839195, 1.32809e+06, 1.49789e+11, 1467.24],
    (10, 0.1, 1e+16, 100): [0.0137122, 2.12062, 0.000237073, 820208, 2.61168e+10, 912.904],
    (10, 0.1, 1e+16, 500): [0.016728, 13.082, 1.02502e-05, 289340, 3.98048e+08, 263.223],
    (10, 0.1, 1e+16, 1000): [0.0176502, 23.219, 3.05847e-06, 168326, 6.90557e+07, 169.117],
    (10, 0.1, 1e+18, 50): [0.030333, 0.353812, 0.00433869, 5.70182e+06, 3.32799e+12, 20857.5],
    (10, 0.1, 1e+18, 100): [0.0306459, 0.423779, 0.00169873, 3.45528e+06, 7.89546e+11, 15999.3],
    (10, 0.1, 1e+18, 500): [0.037013, 0.829891, 0.00013592, 1.01171e+06, 1.84854e+10, 6835.25],
    (10, 0.1, 1e+18, 1000): [0.040034, 1.3353, 3.65219e-05, 621881, 3.05115e+09, 4009.42],
    (100, 0.01, 1e+16, 50): [0.00896083, 4.41165, 0.000230129, 689914, 2.1313e+10, 2848.05],
    (100, 0.01, 1e+16, 100): [0.00993945, 10.0224, 6.04131e-05, 448172, 3.63363e+09, 1708.61],
    (100, 0.01, 1e+16, 500): [0.0117417, 36.03, 3.30018e-06, 137119, 6.06419e+07, 576.448],
    (100, 0.01, 1e+16, 1000): [0.0122224, 47.4428, 9.28996e-07, 81141.7, 1.00824e+07, 350.407],
    (100, 0.01, 1e+18, 50): [0.0188731, 0.660969, 0.00230423, 2.81865e+06, 8.73484e+11, 62481.9],
    (100, 0.01, 1e+18, 100): [0.0207793, 0.894638, 0.000762609, 1.65911e+06, 1.70126e+11, 43498.9],
    (100, 0.01, 1e+18, 500): [0.025865, 2.74053, 3.81581e-05, 536212, 2.74777e+09, 13467.5],
    (100, 0.01, 1e+18, 1000): [0.0276771, 6.48454, 9.66167e-06, 341949, 4.43573e+08, 7729.48],
    (100, 0.01, 1e+20, 500): [0.0633025, 0.513967, 0.000265951, 2.1087e+06, 7.54409e+10, 235687],
    (100, 0.01, 1e+20, 1000): [0.0644214, 0.575835, 0.000104244, 1.23043e+06, 1.72497e+10, 177868],
    (100, 0.05, 1e+16, 50): [0.00749322, 5.5185, 6.89296e-05, 521646, 4.827e+09, 746.344],
    (100, 0.05, 1e+16, 100): [0.008243, 11.882, 1.85058e-05, 334864, 8.31697e+08, 455.054],
    (100, 0.05, 1e+16, 500): [0.00963407, 30.3587, 1.09109e-06, 97526.8, 1.42515e+07, 160.213],
    (100, 0.05, 1e+16, 1000): [0.0097994, 54.3753, 2.93874e-07, 60607.7, 2.37192e+06, 96.3449],
    (100, 0.05, 1e+18, 50): [0.0160252, 0.719384, 0.000729591, 2.02903e+06, 1.99099e+11, 17082.6],
    (100, 0.05, 1e+18, 100): [0.0178367, 0.839623, 0.000243271, 1.1915e+06, 3.89702e+10, 11829.4],
    (100, 0.05, 1e+18, 500): [0.0217923, 3.58124, 1.11028e-05, 404767, 6.03517e+08, 3464.52],
    (100, 0.05, 1e+18, 1000): [0.0228961, 8.32861, 2.91596e-06, 255981, 1.00217e+08, 2060.79],
    (100, 0.05, 1e+20, 1000): [0.057177, 0.555254, 3.13949e-05, 880819, 3.71812e+09, 46344.7],
    (100, 0.1, 1e+16, 50): [0.00690295, 6.14505, 4.10337e-05, 461969, 2.54481e+09, 419.572],
    (100, 0.1, 1e+16, 100): [0.00756411, 12.8701, 1.11314e-05, 295442, 4.41385e+08, 258.144],
    (100, 0.1, 1e+16, 500): [0.00880173, 28.8711, 6.67635e-07, 85086.6, 7.60572e+06, 91.4919],
    (100, 0.1, 1e+16, 1000): [0.00884567, 62.6361, 1.84686e-07, 52877.1, 1.28932e+06, 56.6677],
    (100, 0.1, 1e+18, 50): [0.0149342, 0.694344, 0.000449965, 1.74939e+06, 1.05866e+11, 9808.53],
    (100, 0.1, 1e+18, 100): [0.0167063, 0.830681, 0.000147531, 1.03538e+06, 2.05344e+10, 6709.8],
    (100, 0.1, 1e+18, 500): [0.0201467, 3.92211, 6.51358e-06, 357872, 3.13039e+08, 1928.6],
    (100, 0.1, 1e+18, 1000): [0.0210041, 9.40217, 1.78914e-06, 223191, 5.36115e+07, 1191.47],
    (1e+06, 0.01, 1e+18, 50): [0.00050208, 63.3884, 4.44757e-07, 9649.62, 282831, 4525.76],
    (1e+06, 0.01, 1e+18, 100): [0.000418008, 0.0613888, 6.36732e-07, 2974.59, 80891.1, 8071.35],
    (1e+06, 0.01, 1e+18, 500): [0.000674356, 0.0792354, 1.91562e-08, 1580.18, 1067.24, 1787.88],
    (1e+06, 0.01, 1e+18, 1000): [0.000701841, 1.06826, 4.16885e-09, 1159.77, 170.342, 967.092],
    (1e+06, 0.01, 1e+20, 50): [0.00350777, 6.98108, 3.22131e-07, 113752, 4.9157e+06, 16771.6],
    (1e+06, 0.01, 1e+20, 100): [0.00271335, 11.7543, 1.0508e-07, 68097.3, 958384, 11993.8],
    (1e+06, 0.01, 1e+20, 500): [0.00125595, 0.0459763, 2.5664e-07, 3617.6, 55819.9, 47955.3],
    (1e+06, 0.01, 1e+20, 1000): [0.00152054, 0.0261737, 1.00297e-07, 2557.17, 10253.4, 36135.8],
    (1e+06, 0.05, 1e+18, 50): [0.000358379, 1.73281, 1.60396e-07, 7052.26, 72653.6, 1393.45],
    (1e+06, 0.05, 1e+18, 100): [0.000331241, 0.0302703, 1.75981e-07, 2618.9, 18331.4, 2020.28],
    (1e+06, 0.05, 1e+18, 500): [0.000551464, 0.176115, 4.71788e-09, 1398.33, 232.484, 415.261],
    (1e+06, 0.05, 1e+18, 1000): [0.000560623, 0.825553, 1.38605e-09, 823.222, 40.1999, 268.883],
    (1e+06, 0.05, 1e+20, 50): [0.00289525, 6.13497, 1.03242e-07, 81761.3, 1.13176e+06, 4568.24],
    (1e+06, 0.05, 1e+20, 100): [0.00206425, 12.487, 3.22251e-08, 51517.3, 221408, 3227.36],
    (1e+06, 0.05, 1e+20, 500): [0.00103354, 0.0190167, 6.50768e-08, 3219.04, 12308.1, 11429.1],
    (1e+06, 0.05, 1e+20, 1000): [0.00132936, 0.0161755, 2.6857e-08, 2257.84, 2273.19, 8854.74],
    (1e+06, 0.1, 1e+18, 50): [0.000303789, 0.181984, 1.23874e-07, 5265.41, 41800.8, 906.042],
    (1e+06, 0.1, 1e+18, 100): [0.000295149, 0.0222685, 1.04352e-07, 2450.04, 9766.22, 1129.65],
    (1e+06, 0.1, 1e+18, 500): [0.000498475, 0.37451, 2.63164e-09, 1323.17, 122.695, 227.012],
    (1e+06, 0.1, 1e+18, 1000): [0.000504062, 0.80318, 8.5332e-10, 716.548, 21.5421, 153.633],
    (1e+06, 0.1, 1e+20, 50): [0.0026521, 6.15062, 6.224e-08, 71611.9, 597431, 2591.43],
    (1e+06, 0.1, 1e+20, 100): [0.00177825, 13.0852, 2.1145e-08, 44348.9, 123432, 1949.85],
    (1e+06, 0.1, 1e+20, 500): [0.000936772, 0.0158264, 3.70013e-08, 3058.87, 6515.43, 6311.15],
    (1e+06, 0.1, 1e+20, 1000): [0.00125107, 0.0125786, 1.57894e-08, 2075.4, 1189.55, 4890.31],
}

def get_reference_path(filename):
    current_dir = os.path.dirname(__file__)  # path to current file
    data_dir = os.path.join(current_dir, "test_data")
    return os.path.join(data_dir, filename)


@pytest.fixture
def test_module():
    try:
        from alpha_disc import mesa_vs
        return mesa_vs
    except ModuleNotFoundError:
        pytest.skip("Mesa2py is not installed, the tests are skipped.")


@pytest.mark.parametrize('test_case, test_values', test_cases.items())
def test_vs(test_case, test_values, test_module):
    M, alpha, Mdot, r = test_case
    rg = 2 * M * constants.GM_sun.cgs.value / constants.c.cgs.value ** 2
    r *= rg
    h = np.sqrt(M * constants.GM_sun.cgs.value * r)
    r_in = 3 * rg
    F = Mdot * h * (1 - np.sqrt(r_in / r))
    structure = test_module.MesaVerticalStructureRadConv(M * constants.M_sun.cgs.value, alpha, r, F)

    z0r, _ = structure.fit()
    z0r_test = test_values[0]
    assert np.isclose(z0r, z0r_test)

    varkappa_C, rho_C, T_C, P_C, Sigma0 = structure.parameters_C()
    assert np.allclose([varkappa_C, rho_C, T_C, P_C, Sigma0], test_values[1:])


def test_vertical_profile(tmp_path, test_module):

    M = 5 * constants.M_sun.cgs.value
    alpha = 0.1
    r = 1e10
    Teff = 1e4
    profiles.Vertical_Profile(M, alpha, r, Teff, input='Teff', structure='MesaRadConv', mu=0.62,
                              n=100, add_Pi_values=True, path_dots=tmp_path / 'test_vertical_profile.dat')
    resulting_file = np.loadtxt(tmp_path / 'test_vertical_profile.dat')
    reference_file = np.loadtxt(get_reference_path('vs_mesa.dat'))
    assert np.allclose(reference_file, resulting_file)


def test_S_curve(tmp_path, test_module):
    M = 5 * constants.M_sun.cgs.value
    alpha = 0.1
    r = 1e10
    profiles.S_curve(4e3, 1e4, M, alpha, r, input='Teff', structure='MesaRadConv', mu=0.62, n=100, tau_break=True,
                     path_dots=tmp_path / 'test_S_curve.dat', add_Pi_values=True)
    resulting_file = np.loadtxt(tmp_path / 'test_S_curve.dat')
    reference_file = np.loadtxt(get_reference_path('S-curve_mesa.dat'))
    assert np.allclose(reference_file, resulting_file)


def test_rsdial_profile(tmp_path, test_module):
    M = 5 * constants.M_sun.cgs.value
    alpha = 0.1
    profiles.Radial_Profile(M, alpha, 1e9, 1e12, 1, input='Mdot_Mdot_edd', structure='MesaRadConv', mu=0.62, n=100,
                   tau_break=True, path_dots=tmp_path / 'test_radial_struct.dat', add_Pi_values=True)
    resulting_file = np.loadtxt(tmp_path / 'test_radial_struct.dat')
    reference_file = np.loadtxt(get_reference_path('radial_struct_mesa.dat'))
    assert np.allclose(reference_file, resulting_file)
